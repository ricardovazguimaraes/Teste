using Gpa.Comercio.BusinessEntity;
using Gpa.Comercio.Dalc.Helper;
using Gpa.Comercio.Dalc.Ln;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

namespace Gpa.Comercio.Dalc
{
    public class CepDalc
    {
        private class Singleton { internal static readonly CepDalc inst = new CepDalc(); }
        public static CepDalc Instance { get { return Singleton.inst; } }

        /// <summary>
        /// Lista Ceps para integração LN
        /// </summary>
        public List<CepBE> IntegrarLn(DateTime dataSincronismo)
        {
            List<CepBE> retornoCeps = new List<CepBE>();
            Database db = DataHelper.CreateDatabaseCEP();
            using (DbCommand dbCommand = DataHelper.GetStoredProcCommand(db, "CepIntegra"))
            {
                db.AddInParameter(dbCommand, "dataSincronismoInicio", DbType.DateTime, IntegracaoHelperDalc.Instance.GetLastSynchronization(IntegracaoHelperDalc.TipoIntegracao.CEP));
                db.AddInParameter(dbCommand, "dataSincronismoFim", DbType.DateTime, dataSincronismo);

                using (IDataReader reader = db.ExecuteReader(dbCommand))
                {
                    while (reader.Read())
                        retornoCeps.Add(Mapping(reader));
                }
            }
            return retornoCeps;
        }

        /// <summary>
        /// Lista todos os ceps.
        /// </summary>
        /// <param name="pesquisa">Filtro da pesquisa</param>
        public List<CepBE> Listar(PropriedadesBuscaCepBE pesquisa)
        {
            List<CepBE> retornoCeps = new List<CepBE>();
            Database db = DataHelper.CreateDatabaseCEP();

            using (DbCommand dbCommand = DataHelper.GetStoredProcCommand(db, "CepBusca"))
            {
                db.AddInParameter(dbCommand, "Cep", DbType.String, pesquisa.Cep);

                if (!string.IsNullOrEmpty(pesquisa.xmlCep))
                    db.AddInParameter(dbCommand, "xmlCep", DbType.String, pesquisa.xmlCep);

                using (IDataReader reader = db.ExecuteReader(dbCommand))
                {
                    while (reader.Read())
                        retornoCeps.Add(Mapping(reader));
                }
            }

            return retornoCeps;
        }

        public static void Incluir(CepBE cep)
        {
            Database db = DataHelper.CreateDatabaseCEP();
            using (DbCommand dbCommand = db.GetStoredProcCommand("CepInclui"))
            {
                db.AddInParameter(dbCommand, "Cep", DbType.String, cep.Cep);
                db.AddInParameter(dbCommand, "Tipo", DbType.String, cep.Tipo);
                db.AddInParameter(dbCommand, "Rua", DbType.String, cep.Rua);
                db.AddInParameter(dbCommand, "Bairro", DbType.String, cep.Bairro);
                db.AddInParameter(dbCommand, "Municipio", DbType.String, cep.Municipio);
                db.AddInParameter(dbCommand, "Estado", DbType.String, cep.Estado);
                db.AddInParameter(dbCommand, "DataUltimaAtualizacao", DbType.DateTime, DateTime.Now);
                db.ExecuteNonQuery(dbCommand);
            }
        }

        /// <summary>
        /// Lista parcialmente os ceps
        /// </summary>
        public List<CepBE> ListarParcial(PropriedadesBuscaCepBE pesquisa)
        {
            List<CepBE> retornoCeps = new List<CepBE>();
            Database db = DataHelper.CreateDatabaseCEP();

            using (DbCommand dbCommand = DataHelper.GetStoredProcCommand(db, "CepBuscaParcial"))
            {
                db.AddInParameter(dbCommand, "Cep", DbType.String, pesquisa.Cep);

                if (!string.IsNullOrEmpty(pesquisa.xmlCep))
                    db.AddInParameter(dbCommand, "xmlCep", DbType.String, pesquisa.xmlCep);

                using (IDataReader reader = db.ExecuteReader(dbCommand))
                {
                    while (reader.Read())
                        retornoCeps.Add(Mapping(reader));
                }
            }

            return retornoCeps;
        }

        public void AtualizarCepComCoordenadas(CepBE cep)
        {
            Database db = DataHelper.CreateDatabaseCEP();

            using (DbCommand dbCommand = DataHelper.GetStoredProcCommand(db, "AtualizarCoordenadasCep"))
            {
                db.AddInParameter(dbCommand, "Longitude", DbType.Decimal, cep.Longitude);
                db.AddInParameter(dbCommand, "Latitude", DbType.Decimal, cep.Latitude);
                db.AddInParameter(dbCommand, "Cep", DbType.String, cep.Cep);

                db.ExecuteNonQuery(dbCommand);
            }
        }

        private CepBE Mapping(IDataReader reader)
        {
            return new CepBE()
            {
                Cep = DataHelper.ToGenericValue<string>(reader, "Cep"),
                Tipo = DataHelper.ToGenericValue<string>(reader, "Tipo"),
                Rua = DataHelper.ToGenericValue<string>(reader, "Rua"),
                Bairro = DataHelper.ToGenericValue<string>(reader, "Bairro"),
                Municipio = DataHelper.ToGenericValue<string>(reader, "Municipio"),
                Estado = DataHelper.ToGenericValue<string>(reader, "Estado"),
                Latitude = DataHelper.HasColumn(reader, "Latitude") ? DataHelper.ToGenericValue<decimal?>(reader, "Latitude") : null,
                Longitude = DataHelper.HasColumn(reader, "Longitude") ? DataHelper.ToGenericValue<decimal?>(reader, "Longitude") : null,
                CoordenadaAdicionada = DataHelper.HasColumn(reader, "CoordenadaAdicionada") ? DataHelper.ToGenericValue<bool>(reader, "CoordenadaAdicionada") : false,
            };
        }
    }
}



